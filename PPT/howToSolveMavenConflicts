
<!doctype html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

    <title>葡萄藤PPT</title>

    <link rel="stylesheet" href="https://ptteng.github.io/PPT/css/reveal/reveal.css">

    <!-- PPT主题，可以在/css/reveal/theme/中选择其他主题，目前暂时只能使用该模板 -->
    <link rel="stylesheet" href="https://ptteng.github.io/PPT/css/reveal/theme/ptt.css">

    <!-- syntax highlighting 代码高亮主题 -->
    <link rel="stylesheet" href="https://ptteng.github.io/PPT/lib/reveal/css/zenburn.css">

    <!-- 打印和PDF输出样式 -->
    <script>
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = window.location.search.match( /print-pdf/gi ) ? 'https://ptteng.github.io/PPT/css/reveal/print/pdf.css' : '../css/reveal/print/paper.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
    </script>
</head>
<body>
<img src="https://ptteng.github.io/PPT/img/demo/logo.png" alt="" usemap="#pttmap" class="base-logo">
<map name="pttmap">
    <area shape="rect" coords="0,0,276,58" href="http://www.jnshu.com" alt="" target="_blank"/>
</map>
<div class="reveal">
    <div class="slides">
        <section>
            <h2>如何处理 maven 依赖冲突？</h2>
			<p></p>
            <h3>java 分享会</h3>
            <p>分享人：童志荣</p>
        </section>
        <section>
            <p>1.背景介绍</p>
            <p>2.知识剖析</p>
            <p>3.常见问题</p>
            <p>4.解决方案</p>
            <p>5.编码实战</p>
            <p>6.扩展思考</p>
            <p>7.参考文献</p>
            <p>8.更多讨论</p>
        </section>
        <section>
            <h3>1.背景介绍</h3>
        </section>
		
		
		 <section>
            <p>Java的强大之处就是在于它的生态环境，有众多的第三方服务支持复杂项目的开发。
                基本上每个稍微有点规模的Java项目都会依赖到众多的jar包，</p>
            <p>而Maven应该是目前管理jar包依赖最流行的工具。</p>
           </section>
           <section>
            <p>maven的出现方便了我们的包导入，引用但是maven引入的jar包往往也引入了其余的jar包。
            而这往往是包冲突最隐蔽的地方，尤其是对引入的包结构不熟悉，十分难分析到问题的原因。
            </p>
            <p>
            1.运行了很久的代码，突然间就报错了，而在最近的代码中又完全没有涉及到该代码的改动，或者不定时异常。
            </p>
		</section>
			
		
        <section>
            <h3>2.知识剖析</h3>
            <p>Maven采用“最近获胜策略（nearest wins strategy）”的方式处理依赖冲突。</p>
            <p>换句话说，如果一个项目依赖于相同artifact的多个版本，在依赖树中离项目最近的那个版本将被使用。</p>
        </section>
		
         <section>
            <h3>3.常见问题</h3>
         </section>
         <section>
            <p>现在有一个web应用resolve-web。</p>
           	<p>4个jar包：project-A，project-B，project-C，project-Common</p>
            <p>resolve-web 依赖于project-A和project-B，</p>
            <p>project-A依赖于project-common的1.0版本，调用了其中的sayHello()方法。</p>
         </section>
         <section>
            <p>project-B依赖于project-C，而project-C又进一步依赖于project-common的2.0版本，并调用其中的sayGoodBye()方法。</p>
            <p>project-common的1.0和2.0版本唯一区别在于，1.0中包含sayHello()方法，而2.0中包含了sayHello()和sayGoodBye()两个方法。</p>
        </section>
        <section>
            <p>根据Maven的依赖传递机制，resolve-web将同时依赖于project-common的1.0和2.0版本，这就造成了依赖冲突。
         	</p>
         	<p>	而根据最近获胜策略，Maven将选择project-common的1.0版本作为最终的依赖。
            </p>
             <p>整个项目的依赖关系如下图：</p>
            <img src="C:\Users\think\Desktop\github-maven-demo.jpg">
		</section>

	   <section>
            <p>
            对于Maven 来说，由于proejct-common的1.0版本比2.0版本在依赖树中离resolve-web更近，故1.0版本获胜。</p>
            <p>在resolve-web中执行"mvn dependency:tree -Dverbose"可以看到resolve-web的依赖关系：
            </p>
             <img src="C:\Users\think\Desktop\omitConflict.png">
        </section>

        <section>
        	<p>可以看到，project-common:project-commmon:jar:2.0被忽略掉了。</p>
        	<p>此时在resolve-web的war包中将只包含project-common的1.0版本。</p>
        	<p>所以现在就产生问题了。由于project-common的1.0版本中不包含sayGoodBye()方法，而该方法正是project-C所需要的，所以运行时将出现“NoSuchMethodError”。</p>
        </section>
      	
      	<section>
      	  	<img src="C:\Users\think\Desktop\goodbye.png">

      	</section>
        <section>
            <h3>4.解决方案</h3>
            <p>方法1：显式加入对project-common 2.0版本的依赖。</p>
        </section>

        <section>
        	
        	<p>先前的2.0版本不是离resolve-web远了点吗，那我们就直接将它作为resolve-web的依赖，这不就比1.0版本离resolve-web还近吗？</p>
        	<p>在resove-web的pom.xml文件中直接加上对project-common 2.0 的依赖：</p>
        	<img src="C:\Users\think\Desktop\方案一显式加入依赖.png">
        </section>
		
		<section>
			<p>方法2：resolve-web对project-A的dependency声明中，将project-common排除掉。在resolve-web的pom.xml文件中修改对project-A的dependency声明：</p>
			<img src="C:\Users\think\Desktop\exclusion.png">
		</section>
        <section>
            <h3>5.编码实战</h3>
            <p>让我们来看看这个例子的代码。</p>
        </section>

        <section>
        <img src="">
		<img src="">
        </section>
        <section>
            <h3>6.扩展思考</h3>
        </section>

        <section>
            <p></p>
        </section>
        
        <section>
            <h3>7.参考文献</h3>
            <p>http://www.cnblogs.com/davenkin/p/advanced-maven-resolve-dependencies-conflicts.html</p>
        </section>
        <section>
            <h3>8.更多讨论</h3>
            <p></p>
        </section>
        <section>
            <h4>鸣谢</h4>
            <p>感谢观看,如有出错,恳请指正</p>
            <p><small>BY : 北京分院 童志荣</small></p>
        </section>

    </div>
</div>

<script src="https://ptteng.github.io/PPT/lib/reveal/js/head.min.js"></script>
<script src="https://ptteng.github.io/PPT/lib/reveal/reveal.js"></script>

<script>

    // 以下为常见配置属性的默认值
    // {
    // 	controls: true, // 是否在右下角展示控制条
    // 	progress: true, // 是否显示演示的进度条
    // 	slideNumber: false, // 是否显示当前幻灯片的页数编号，也可以使用代码slideNumber: 'c / t' ，表示当前页/总页数。
    // 	history: false, // 是否将每个幻灯片改变加入到浏览器的历史记录中去
    // 	keyboard: true, // 是否启用键盘快捷键来导航
    // 	overview: true, // 是否启用幻灯片的概览模式，可使用"Esc"或"o"键来切换概览模式
    // 	center: true, // 是否将幻灯片垂直居中
    // 	touch: true, // 是否在触屏设备上启用触摸滑动切换
    // 	loop: false, // 是否循环演示
    // 	rtl: false, // 是否将演示的方向变成RTL，即从右往左
    // 	fragments: true, // 全局开启和关闭碎片。
    // 	autoSlide: 0, // 两个幻灯片之间自动切换的时间间隔（毫秒），当设置成 0 的时候则禁止自动切换，该值可以被幻灯片上的 ` data-autoslide` 属性覆盖
    // 	transition: 'default', // 切换过渡效果，有none/fade/slide/convex/concave/zoom
    // 	transitionSpeed: 'default', // 过渡速度，default/fast/slow
    // 	mouseWheel: true, //是否启用通过鼠标滚轮来切换幻灯片
    // }

    // 初始化幻灯片
    Reveal.initialize({
        history: true,
        dependencies: [
            { src: 'https://ptteng.github.io/PPT/plugin/markdown/marked.js' },
            { src: 'https://ptteng.github.io/PPT/plugin/markdown/markdown.js' },
            { src: 'https://ptteng.github.io/PPT/plugin/notes/notes.js', async: true },
            { src: 'https://ptteng.github.io/PPT/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }
        ]
    });
</script>
</body>
</html>
